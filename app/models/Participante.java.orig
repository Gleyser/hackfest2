package models;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.validation.constraints.NotNull;

import models.exceptions.PessoaInvalidaException;

import org.hibernate.validator.constraints.Email;

import play.data.validation.Constraints.MaxLength;

@Entity
public class Participante {
<<<<<<< HEAD

	private final String EMAIL_PATTERN = "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"
=======
	private final int tamanhoMaximoDoEmail = 70;
	private final int tamanhoMaximoDoNome = 70;
	private final String controleDeCaracteresDoEmail = "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"
>>>>>>> fb9373061913990b49c898fe4102742455760a7d
			+ "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";

	@Id
	@GeneratedValue
	private long id;

	@NotNull
<<<<<<< HEAD
	@MaxLength(value = 70)
=======
	@MaxLength(value = tamanhoMaximoDoNome)
>>>>>>> fb9373061913990b49c898fe4102742455760a7d
	private String nome;

	@Email
	@NotNull
<<<<<<< HEAD
	@MaxLength(value = 70)
=======
	@MaxLength(value = tamanhoMaximoDoEmail)
>>>>>>> fb9373061913990b49c898fe4102742455760a7d
	private String email;

	@ManyToOne
	private Evento evento;

	public Participante() {
	}

	public Participante(String nome, String email, Evento evento)
			throws PessoaInvalidaException {
<<<<<<< HEAD
		setNome(nome);
		setEmail(email);
		setEvento(evento);
=======
		this.nome = nome;
		this.email = email;
		this.evento = evento;
>>>>>>> fb9373061913990b49c898fe4102742455760a7d
	}

	public String getNome() {
		return nome;
	}

	public void setNome(String nome) throws PessoaInvalidaException {
<<<<<<< HEAD
		if (nome == null)
			throw new PessoaInvalidaException("Parametro nulo");
		if (nome.length() > 70)
			throw new PessoaInvalidaException("Nome longo");
=======
		if (nome == null){
			throw new PessoaInvalidaException("Parametro nulo");
		}
			
		if (nome.length() > tamanhoMaximoDoNome){
			throw new PessoaInvalidaException("Nome longo");
		}
			
>>>>>>> fb9373061913990b49c898fe4102742455760a7d
		this.nome = nome;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) throws PessoaInvalidaException {
<<<<<<< HEAD
		if (email == null)
			throw new PessoaInvalidaException("Parametro nulo");
		if (!email.matches(EMAIL_PATTERN))
			throw new PessoaInvalidaException("Email inválido");
		if (email.length() > 70)
			throw new PessoaInvalidaException("Email longo");
=======
		if (email == null){
			throw new PessoaInvalidaException("Parametro nulo");
		}
			
		if (!email.matches(controleDeCaracteresDoEmail)){
			throw new PessoaInvalidaException("Email inválido");
		}
			
		if (email.length() > tamanhoMaximoDoEmail){
			throw new PessoaInvalidaException("Email longo");
		}
			
>>>>>>> fb9373061913990b49c898fe4102742455760a7d
		this.email = email;
	}

	public Evento getEvento() {
		return evento;
	}

	public void setEvento(Evento evento) throws PessoaInvalidaException {
<<<<<<< HEAD
		if (evento == null)
			throw new PessoaInvalidaException("Parametro nulo");
		this.evento = evento;
	}
=======
		if (evento == null){
			throw new PessoaInvalidaException("Parametro nulo");
		}
			
		this.evento = evento;
	}

	public long getId() {
		return id;
	}

	public void setId(long id) {
		this.id = id;
	}

	public String getEmailPattern() {
		return controleDeCaracteresDoEmail;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((email == null) ? 0 : email.hashCode());
		result = prime * result + ((evento == null) ? 0 : evento.hashCode());
		result = prime * result + ((nome == null) ? 0 : nome.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj){
			return true;
		}
			
		if (obj == null){
			return false;
		}
			
		if (getClass() != obj.getClass()){
			return false;
		}
			
		Participante other = (Participante) obj;
	
		if (!nome.equals(other.nome)){
			return false;
		}
			
		return true;
	}
	
	
>>>>>>> fb9373061913990b49c898fe4102742455760a7d
}
